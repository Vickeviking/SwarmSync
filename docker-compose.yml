services:
  postgres:
    image: postgres:15-alpine
    container_name: swarmsync-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app_db
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: swarmsync-redis

  core:
    build:
      context: ./swarm_core
      dockerfile: Dockerfile
    container_name: swarmsync-core
    working_dir: /usr/src/swarm_core
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/app_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000" # HTTP
      - "5001:5001/udp" # UDP heartbeat
    volumes:
      - ./swarm_core:/usr/src/swarm_core

  consumer:
    build:
      context: ./swarm_consumer
      dockerfile: Dockerfile
      target: builder
    container_name: swarmsync-consumer
    working_dir: /usr/src/swarm_consumer
    volumes:
      - ./swarm_consumer:/usr/src/swarm_consumer
    entrypoint: ["tail", "-f", "/dev/null"]
    profiles: ["cli"]
    environment:
      - CORE_API_URL=http://core

  swarm-worker:
    build: ./swarm_worker
    container_name: swarmsync-worker
    depends_on:
      - core
    environment:
      - CORE_API_URL=http://core
      - WORKER_CONFIG_PATH=/worker/config/worker_config.json
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      # mount the named volume here:
      - worker-config-data:/worker/config
      # allow Docker engine use
      - /var/run/docker.sock:/var/run/docker.sock
    stdin_open: true
    tty: true
    # Entrypoint is in the image (swarm-worker-tui)

  db_backup:
    image: alpine:3.17
    container_name: swarmsync-db-backup
    depends_on:
      - postgres
    environment:
      - PGPASSWORD=postgres
    volumes:
      - ./backups:/backups
    command: >
      sh -c "
        apk add --no-cache postgresql-client findutils &&
        echo '0 */8 * * * pg_dump -h postgres -U postgres app_db > /backups/backup_$(date +\%Y\%m\%d_\%H\%M\%S).sql' > /etc/crontabs/root &&
        echo '5 0 * * * find /backups -type f -mtime +7 -delete' >> /etc/crontabs/root &&
        crond -f
      "

volumes:
  postgres_data: {}
  worker-config-data: {}
